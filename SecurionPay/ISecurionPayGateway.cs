using SecurionPay.Request;
using SecurionPay.Request.Checkout;
using SecurionPay.Response;
using System;
using System.Threading.Tasks;
namespace SecurionPay
{
    interface ISecurionPayGateway
    {
        Task<Subscription> CancelSubscription(SubscriptionCancelRequest cancelSubscriptionsRequest);
        Task<Charge> CaptureCharge(CaptureRequest capture);
        Task<BlacklistRule> CreateBlacklistRule(BlacklistRuleRequest request);
        Task<Card> CreateCard(CardRequest createCardRequest);
        Task<Charge> CreateCharge(ChargeRequest chargeRequest);
        Task<Credit> CreateCredit(CreditRequest request);
        Task<Credit> CreateCredit(CreditWithCardRequest request);
        Task<CrossSaleOffer> CreateCrossSaleOffer(SecurionPay.Request.CrossSaleOffer.CrossSaleOfferRequest request);
        Task<Customer> CreateCustomer(CustomerRequest createCustomerRequest);
        Task<CustomerRecord> CreateCustomerRecord(CustomerRecordRequest request);
        Task<Plan> CreatePlan(PlanRequest createPlanRequest);
        Task<Subscription> CreateSubscription(SubscriptionRequest createSubscriptionRequest);
        Task<Token> CreateToken(TokenRequest createTokenRequest);
        Task<DeleteResponse> DeleteBlacklistRule(string id);
        Task<DeleteResponse> DeleteCard(string customerId, string id);
        Task<DeleteResponse> DeleteCrossSaleOffer(string crossSaleOfferId);
        Task<DeleteResponse> DeleteCustomer(string id);
        Task<DeleteResponse> DeletePlan(string id);
        Task<ListResponse<BlacklistRule>> ListBlacklistRules();
        Task<ListResponse<BlacklistRule>> ListBlacklistRules(BlacklistRuleListRequest request);
        Task<ListResponse<Card>> ListCards(CardListRequest request);
        Task<ListResponse<Card>> ListCards(string customerId);
        Task<ListResponse<Charge>> ListCharges();
        Task<ListResponse<Charge>> ListCharges(ChargeListRequest request);
        Task<ListResponse<Credit>> ListCredits();
        Task<ListResponse<CrossSaleOffer>> ListCrossSaleOffers();
        Task<ListResponse<CrossSaleOffer>> ListCrossSaleOffers(SecurionPay.Request.CrossSaleOffer.CrossSaleOfferListRequest request);
        Task<ListResponse<CustomerRecordFee>> ListCustomerRecordFees(CustomerRecordFeeListRequest request);
        Task<ListResponse<CustomerRecordFee>> ListCustomerRecordFees(string customerRecordId);
        Task<ListResponse<CustomerRecordProfit>> ListCustomerRecordProfits(CustomerRecordProfitListRequest request);
        Task<ListResponse<CustomerRecordProfit>> ListCustomerRecordProfits(string customerRecordId);
        Task<ListResponse<CustomerRecord>> ListCustomerRecords();
        Task<ListResponse<CustomerRecord>> ListCustomerRecords(CustomerRecordListRequest request);
        Task<ListResponse<Customer>> ListCustomers();
        Task<ListResponse<Customer>> ListCustomers(CustomerListRequest request);
        Task<ListResponse<Event>> ListEvents();
        Task<ListResponse<Event>> ListEvents(EventListRequest request);
        Task<ListResponse<Plan>> ListPlans();
        Task<ListResponse<Plan>> ListPlans(PlanListRequest request);
        Task<ListResponse<Subscription>> ListSubscriptions(SubscriptionListRequest request);
        Task<ListResponse<Subscription>> ListSubscriptions(string customerId);
        Task<CustomerRecord> RefreshCustomerRecord(CustomerRecordRefreshRequest request);
        Task<Charge> RefundCharge(RefundRequest refund);
        Task<BlacklistRule> RetrieveBlacklistRule(string id);
        Task<Card> RetrieveCard(string customerId, string id);
        Task<Charge> RetrieveCharge(string id);
        Task<Credit> RetrieveCredit(string creditId);
        Task<CrossSaleOffer> RetrieveCrossSaleOffer(string crossSaleOfferId);
        Task<Customer> RetrieveCustomer(string id);
        Task<CustomerRecord> RetrieveCustomerRecord(string customerRecordId);
        Task<CustomerRecordFee> RetrieveCustomerRecordFee(string customerRecordId, string customerRecordFeeId);
        Task<CustomerRecordProfit> RetrieveCustomerRecordProfit(string customerRecordId, string customerRecordProfitId);
        Task<Event> RetrieveEvent(string id);
        Task<Plan> RetrievePlan(string id);
        Task<Subscription> RetrieveSubscription(string customerId, string id);
        Task<Token> RetrieveToken(string id);
        string SignCheckoutRequest(CheckoutRequest checkoutRequest);
        Task<Card> UpdateCard(CardUpdateRequest updateCard);
        Task<Charge> UpdateCharge(ChargeUpdateRequest chargeUpdate);
        Task<Credit> UpdateCredit(CreditUpdateRequest updateRequest);
        Task<CrossSaleOffer> UpdateCrossSaleOffer(SecurionPay.Request.CrossSaleOffer.CrossSaleOfferUpdateRequest request);
        Task<Customer> UpdateCustomer(CustomerUpdateRequest updateCustomerRequest);
        Task<Plan> UpdatePlan(PlanUpdateRequest updatePlanRequest);
        Task<Subscription> UpdateSubscription(SubscriptionUpdateRequest updateSubscriptionRequest);
    }
}
